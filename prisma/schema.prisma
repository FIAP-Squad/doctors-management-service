generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model doctor {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  email        String         @unique @db.VarChar(50)
  crm          String         @unique @db.VarChar(20)
  cpf          String         @unique @db.VarChar(11)
  availability availability[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) // Mantive o padrão "updatedAt" para consistência

  @@index([email], name: "idx_doctor_email")
}

model patient {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  email        String         @unique @db.VarChar(50)
  cpf          String         @unique @db.VarChar(11)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) // Mantive o padrão "updatedAt" para consistência

  @@index([email], name: "idx_doctor_email")
}

model availability {
  id          Int         @id @default(autoincrement())
  status      String      @default("available") @db.VarChar(10)
  date        String
  doctorId    Int
  doctor      doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  timeSlotId  Int
  timeSlot    timeSlot    @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
  appointment appointment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([doctorId, timeSlotId], name: "idx_availability_doctor_timeslot")
}

model timeSlot {
  id           Int            @id @default(autoincrement())
  startTime    String
  endTime      String
  availability availability[]

  @@index([startTime, endTime], name: "idx_timeslot_start_end")
}

model appointment {
  id             Int          @id @default(autoincrement())
  patientId      Int
  availabilityId Int          @unique
  status         String       @db.VarChar(20) @default("scheduled")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  availability   availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  @@index([patientId], name: "idx_appointment_patient")
}

model identityProperties {
  id                  String @id @default(uuid()) @db.Char(36)
  businessPartnerType String @unique @db.VarChar(10)
  clientId            String @unique @db.VarChar(50)
  userPoolId          String @unique @db.VarChar(50)
  queue               String @unique @db.VarChar(50)

  @@index([clientId, userPoolId], name: "idx_identity_client_userpool")
}
